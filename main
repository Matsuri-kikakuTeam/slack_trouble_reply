import json
import requests

# Slack の Bot トークン（安全に管理してください）
SLACK_BOT_TOKEN = "トークン"

def slack_interactions(request):
    """
    Slack のインタラクティブメッセージのリクエストを受け取り、
    「移管する」ボタンが押された場合は元のメッセージを更新し、担当者選択用のボタン群を表示します。
    また、4つの担当者選択ボタン（TASK, CX, 設備機器, SU）が押された場合は、
    押されたボタンの種類と隠しデータ（report の JSON 文字列）をパースし、同じスレッド内に送信します。
    """
    print("=== Request headers ===")
    print(request.headers)
    print("=== Request body (raw) ===")
    print(request.get_data(as_text=True))
    
    if request.method != "POST":
        return ("Method Not Allowed", 405)
    
    payload_str = request.form.get("payload")
    if not payload_str:
        return ("No payload found", 400)
    
    data = json.loads(payload_str)
    user_info = data.get("user", {})
    user_id = user_info.get("id", "")
    print("User info:", user_info)
    
    actions = data.get("actions", [])
    if not actions:
        return ("No actions found", 400)
    
    action = actions[0]
    action_id = action.get("action_id", "")
    print(f"action_id={action_id}")
    
    channel_id = data["channel"]["id"]
    message = data.get("message", {})
    # スレッド内なら thread_ts が存在するので、それを利用。なければメッセージの ts を利用
    thread_ts = message.get("thread_ts") or message.get("ts")
    print(f"thread_ts: {thread_ts}")
    
    # 「移管する」ボタンが押された場合
    if action_id == "button_transfer":
        # ボタンの value に埋め込まれている report のデータ（JSON文字列）を取得
        report_data_str = action.get("value", "")
        try:
            report_data = json.loads(report_data_str)
        except Exception as e:
            print("Error parsing report data from value:", e)
            report_data = {}
        
        mention = f"<@{user_id}> "
        # ① 元のメッセージを更新して「移管ボタンが押されました。」と通知
        update_slack_message(
            channel=channel_id,
            ts=message.get("ts"),
            new_text=mention + "移管ボタンが押されました。"
        )
        # ② 担当者選択用のボタン群を同じスレッド内に送信する（ここでは report_data を value に保持）
        team_payload = create_team_selection_payload(report_data, thread_ts)
        send_to_slack(SLACK_BOT_TOKEN, team_payload)
    
    # 担当者選択用の4つのボタンが押された場合
    elif action_id in ["button_TASK", "button_CX", "button_設備機器", "button_SU"]:
        hidden_value = action.get("value", "")
        try:
            parsed_value = json.loads(hidden_value)
        except Exception as e:
            print("Error parsing hidden value:", e)
            parsed_value = {}
        details_text = (
            "押されたボタンの種類: " + action_id + "\n" +
            "隠しデータ: " + json.dumps(parsed_value, ensure_ascii=False)
        )
        # 同じスレッド内に結果を送信（元メッセージを更新）
        update_slack_message(
            channel=channel_id,
            ts=message.get("ts"),
            new_text=details_text
        )
    
    return ("OK", 200)

def create_team_selection_payload(report, thread_ts):
    """
    隠しデータ（report の内容）を value に持たせた、担当者選択用のボタン群を含むペイロードを生成する関数。
    表示されるボタンは「TASK」「CX」「設備機器」「SU」です。
    """
    report_json = json.dumps(report, ensure_ascii=False)
    return {
        "channel": "C07AHJ1T17E",
        "text": "担当者を選択してください。",
        "thread_ts": thread_ts,
        "attachments": [
            {
                "blocks": [
                    {
                        "type": "actions",
                        "elements": [
                            {
                                "type": "button",
                                "text": {"type": "plain_text", "text": "TASK", "emoji": True},
                                "style": "primary",
                                "action_id": "button_TASK",
                                "value": report_json
                            },
                            {
                                "type": "button",
                                "text": {"type": "plain_text", "text": "CX", "emoji": True},
                                "style": "primary",
                                "action_id": "button_CX",
                                "value": report_json
                            },
                            {
                                "type": "button",
                                "text": {"type": "plain_text", "text": "設備機器", "emoji": True},
                                "style": "primary",
                                "action_id": "button_設備機器",
                                "value": report_json
                            },
                            {
                                "type": "button",
                                "text": {"type": "plain_text", "text": "SU", "emoji": True},
                                "style": "primary",
                                "action_id": "button_SU",
                                "value": report_json
                            }
                        ]
                    }
                ]
            }
        ]
    }

def update_slack_message(channel, ts, new_text):
    """
    Slack の chat.update API を利用して、指定されたメッセージを更新する関数。
    """
    url = "https://slack.com/api/chat.update"
    headers = {
        "Authorization": f"Bearer {SLACK_BOT_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "channel": channel,
        "ts": ts,
        "text": new_text,
        "attachments": []
    }
    resp = requests.post(url, headers=headers, json=payload)
    resp_data = resp.json()
    print("update_slack_message response:", json.dumps(resp_data, indent=2, ensure_ascii=False))
    return resp_data

def send_to_slack(token, payload):
    """
    Slack の chat.postMessage API を利用してメッセージを送信する関数。
    """
    url = "https://slack.com/api/chat.postMessage"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    response = requests.post(url, json=payload, headers=headers)
    response_data = response.json()
    print(f"Slack API Response: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
    if not response_data.get("ok"):
        print(f"Slack API Error: {response_data.get('error')} - Payload: {payload}")
        raise Exception(f"Slack API Error: {response_data.get('error')}")
    return response_data
