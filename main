import json
import requests

# Slack の Bot トークン（実際の運用では安全な方法で管理してください）
SLACK_BOT_TOKEN = "トークン"

def slack_interactions(request):
    """Slackのインタラクティブメッセージを受け取り、ボタンが押されたときに対応する処理を行う。"""
    print("=== Request headers ===")
    print(request.headers)
    print("=== Request body (raw) ===")
    print(request.get_data(as_text=True))

    if request.method != "POST":
        return ("Method Not Allowed", 405)

    payload_str = request.form.get("payload")
    if not payload_str:
        return ("No payload found", 400)

    data = json.loads(payload_str)
    
    # ユーザー情報を取得し、IDを取り出す
    user_info = data.get("user", {})
    user_id = user_info.get("id", "")
    print("User info:", user_info)

    actions = data.get("actions", [])
    if not actions:
        return ("No actions found", 400)

    action = actions[0]
    action_id = action.get("action_id", "")
    print(f"action_id={action_id}")

    message_ts = data["message"]["ts"]
    channel_id = data["channel"]["id"]

    # ユーザーへのメンション文字列
    mention = f"<@{user_id}> "

    # 「移管する」ボタンの処理
    if action_id == "button_transfer":
        update_slack_message(
            channel=channel_id,
            ts=message_ts,
            new_text=mention + "移管処理が実行されました。"
        )

    return ("OK", 200)

def update_slack_message(channel, ts, new_text):
    """
    Slackメッセージを chat.update で上書きする。
    """
    url = "https://slack.com/api/chat.update"
    headers = {
        "Authorization": f"Bearer {SLACK_BOT_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "channel": channel,
        "ts": ts,
        "text": new_text,
        "attachments": []
    }
    resp = requests.post(url, headers=headers, json=payload)
    print("update_slack_message response:", resp.json())
    return resp.json()



def get_api_token():
    """
    API から認証トークンを取得する。
    """
    url = 'https://api.m2msystems.cloud/login'
    mail = "development+20211103@matsuri-tech.com"
    password = "rYGOOh9PgUxFhjhd"

    payload = {
        "email": mail,
        "password": password
    }

    try:
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            json_data = response.json()
            token = json_data.get('accessToken')
            return token
        else:
            return None
    except requests.exceptions.RequestException:
        return None
